// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "nApi", "interactiveTransactions"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
  reExport = Directories

  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

enum ElectionType {
  shared
  virtual
}

model Election {
  /// @HideField({ output: false, input: true })
  id             Int          @id @default(autoincrement())
  /// @HideField({ output: false, input: true })
  code           String       @unique
  /// @HideField({ output: false, input: true })
  numberOfJoined Int          @default(0) @map("number_of_joined")
  /// @HideField({ output: false, input: true })
  lastUsed       DateTime     @default(now()) @map("last_used")
  /// @HideField({ output: false, input: true })
  type           ElectionType @default(shared)

  dbName                     String
  dbPsw                      String?
  numberOfVoters             Int      @map("number_of_voters")
  numberOfVotePerVoterMin    Int      @map("number_of_vote_per_voter_min")
  numberOfVotePerVoterMax    Int      @map("number_of_vote_per_voter_max")
  allowMultipleSameCandidate Boolean? @map("allow_multiple_same_candidate")
  numberOfVoted              Int      @default(0) @map("number_of_voted")
  numberOfSeatsTaken         Int      @default(0) @map("number_of_seats_taken")
  hasSkipped                 Boolean  @default(false) @map("has_skipped")
  isDownloadDisabled         Boolean  @default(false) @map("is_download_disabled")

  /// @Validator.IsNotEmpty()
  candidatesData Json

  photo   Photo?
  /// @HideField({ output: true, input: true })
  photoId Int?

  @@map("elections")
}

model Photo {
  id   Int    @id @default(autoincrement())
  data String

  election Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

  electionId Int

  @@map("photos")
}
